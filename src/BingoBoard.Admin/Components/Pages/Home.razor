@page "/"
@rendermode InteractiveServer
@attribute [Authorize]
@using BingoBoard.Admin.Models
@using BingoBoard.Admin.Services
@using Microsoft.AspNetCore.Hosting.Server
@using Microsoft.AspNetCore.Hosting.Server.Features
@using Microsoft.AspNetCore.SignalR.Client
@inject IBingoService BingoService
@inject IClientConnectionService ClientService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AddressResolver AddressResolver

@implements IAsyncDisposable

<PageTitle>Bingo Admin Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">AspiriFridays Bingo Admin Dashboard</h1>
        </div>
    </div>

    <div class="row">
        <!-- Connected Clients Section -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-users"></i> Connected Clients
                        <span class="badge bg-primary ms-2">@connectedClients.Count</span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (connectedClients.Any())
                    {
                        <div class="list-group">
                            @foreach (var client in connectedClients)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@client.ConnectionId.Substring(0, 8)...</strong>
                                        @if (!string.IsNullOrEmpty(client.UserName))
                                        {
                                            <br><small class="text-muted">@client.UserName</small>
                                        }
                                        <br><small class="text-muted">Connected: @client.ConnectedAt.ToString("HH:mm:ss")</small>
                                    </div>
                                    <div>
                                        @if (!string.IsNullOrEmpty(client.CurrentBingoSetId))
                                        {
                                            <span class="badge bg-success">Has Board</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">No Board</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No clients connected</p>
                    }
                </div>
            </div>
        </div>

        <!-- Admin Controls Section -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-cogs"></i> Admin Controls
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Bingo Squares Management</h6>
                            <div class="mb-3">
                                <label for="clientSelect" class="form-label">Select Client:</label>
                                <select @bind="selectedClientId" class="form-select" id="clientSelect">
                                    <option value="">-- Select a client --</option>
                                    @foreach (var client in connectedClients.Where(c => !string.IsNullOrEmpty(c.CurrentBingoSetId)))
                                    {
                                        <option value="@client.ConnectionId">
                                            @client.ConnectionId.Substring(0, 8)... 
                                            @(!string.IsNullOrEmpty(client.UserName) ? $"({client.UserName})" : "")
                                        </option>
                                    }
                                </select>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(selectedClientId))
                            {
                                <button @onclick="LoadClientBingoSet" class="btn btn-primary">
                                    <i class="fas fa-sync-alt"></i> Load Client Board
                                </button>
                            }
                        </div>
                        
                        <div class="col-md-6">
                            <h6>Broadcast Controls</h6>
                            <div class="d-grid gap-2">
                                <button @onclick="BroadcastMessage" class="btn btn-info">
                                    <i class="fas fa-bullhorn"></i> Send Announcement
                                </button>
                                <button @onclick="RefreshClients" class="btn btn-secondary">
                                    <i class="fas fa-refresh"></i> Refresh Clients
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Current Client Board Section -->
    @if (currentClientBingoSet != null)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-th"></i> Client Board: @selectedClientId?.Substring(0, 8)...
                            @if (currentClientBingoSet.HasWin)
                            {
                                <span class="badge bg-success ms-2">BINGO!</span>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="bingo-grid">
                            @for (int i = 0; i < 25; i++)
                            {
                                var square = currentClientBingoSet.Squares[i];
                                var row = i / 5;
                                var col = i % 5;
                                
                                <div class="bingo-square @(square.IsChecked ? "checked" : "") @GetSquareTypeClass(square.Type)"
                                     @onclick="() => ToggleSquare(square.Id, !square.IsChecked)">
                                    <div class="square-content">
                                        <span class="square-text">@square.Label</span>
                                        @if (square.IsChecked)
                                        {
                                            <i class="fas fa-check check-mark"></i>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Activity Log Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list"></i> Activity Log
                        <button @onclick="ClearLog" class="btn btn-sm btn-outline-secondary ms-2">Clear</button>
                    </h5>
                </div>
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    @if (activityLog.Any())
                    {
                        @foreach (var log in activityLog.OrderByDescending(l => l.Timestamp))
                        {
                            <div class="activity-item">
                                <small class="text-muted">@log.Timestamp.ToString("HH:mm:ss")</small>
                                <span class="ms-2">@log.Message</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No activity yet</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<ConnectedClient> connectedClients = new();
    private List<ActivityLogEntry> activityLog = new();
    private string? selectedClientId;
    private BingoSet? currentClientBingoSet;

    public class ActivityLogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(AddressResolver.Address)
            .Build();        // Set up event handlers
        hubConnection.On<object>("UserConnected", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                AddToLog("New user connected");
                await RefreshClients();
            });
        });

        hubConnection.On<object>("UserDisconnected", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                AddToLog("User disconnected");
                await RefreshClients();
            });
        });

        hubConnection.On<object>("ClientSquareUpdate", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                AddToLog($"Client updated a square");
                if (currentClientBingoSet != null && selectedClientId != null)
                {
                    await LoadClientBingoSet();
                }
            });
        });        hubConnection.On<object>("BingoAchieved", (data) =>
        {
            _ = InvokeAsync(() =>
            {
                AddToLog("🎉 BINGO ACHIEVED! 🎉");
                StateHasChanged();
            });
        });

        hubConnection.On<object>("ClientBingoSetGenerated", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                AddToLog("New bingo set generated for client");
                await RefreshClients();
            });
        });

        await hubConnection.StartAsync();
        await RefreshClients();
    }

    private async Task RefreshClients()
    {
        try
        {
            connectedClients = await ClientService.GetAllClientsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AddToLog($"Error refreshing clients: {ex.Message}");
        }
    }

    private async Task LoadClientBingoSet()
    {
        if (string.IsNullOrEmpty(selectedClientId)) return;

        try
        {
            currentClientBingoSet = await BingoService.GetClientBingoSetAsync(selectedClientId);
            StateHasChanged();
            AddToLog($"Loaded bingo set for client {selectedClientId.Substring(0, 8)}...");
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading client bingo set: {ex.Message}");
        }
    }

    private async Task ToggleSquare(string squareId, bool isChecked)
    {
        if (string.IsNullOrEmpty(selectedClientId) || hubConnection == null) return;

        try
        {
            await hubConnection.SendAsync("AdminUpdateSquare", selectedClientId, squareId, isChecked);
            AddToLog($"Admin updated square {squareId} to {(isChecked ? "checked" : "unchecked")}");
            
            // Refresh the current board
            await Task.Delay(100); // Small delay to ensure the update is processed
            await LoadClientBingoSet();
        }
        catch (Exception ex)
        {
            AddToLog($"Error updating square: {ex.Message}");
        }
    }

    private async Task BroadcastMessage()
    {
        if (hubConnection == null) return;

        try
        {
            await hubConnection.SendAsync("BroadcastToAll", "Admin Message", "This is a test message from the admin");
            AddToLog("Broadcast message sent");
        }
        catch (Exception ex)
        {
            AddToLog($"Error broadcasting message: {ex.Message}");
        }
    }

    private void ClearLog()
    {
        activityLog.Clear();
        StateHasChanged();
    }

    private void AddToLog(string message)
    {
        activityLog.Add(new ActivityLogEntry
        {
            Timestamp = DateTime.Now,
            Message = message
        });
        
        // Keep only the last 100 entries
        if (activityLog.Count > 100)
        {
            activityLog.RemoveAt(0);
        }
        
        StateHasChanged();
    }

    private string GetSquareTypeClass(string? type)
    {
        return type switch
        {
            "bug" => "square-bug",
            "dev" => "square-dev",
            "quote" => "square-quote",
            "oops" => "square-oops",
            "meta" => "square-meta",
            "free" => "square-free",
            _ => ""
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .bingo-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 2px;
        max-width: 800px;
        margin: 0 auto;
    }

    .bingo-square {
        aspect-ratio: 1;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        background-color: #f8f9fa;
        min-height: 100px;
    }

    .bingo-square:hover {
        border-color: #007bff;
        transform: scale(1.02);
    }

    .bingo-square.checked {
        background-color: #d4edda;
        border-color: #28a745;
    }

    .square-content {
        text-align: center;
        padding: 8px;
        position: relative;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .square-text {
        font-size: 0.85rem;
        font-weight: 500;
        line-height: 1.2;
        word-break: break-word;
    }

    .check-mark {
        position: absolute;
        top: 4px;
        right: 4px;
        color: #28a745;
        font-size: 1.2rem;
    }

    .square-bug { border-left: 4px solid #dc3545; }
    .square-dev { border-left: 4px solid #007bff; }
    .square-quote { border-left: 4px solid #6f42c1; }
    .square-oops { border-left: 4px solid #fd7e14; }
    .square-meta { border-left: 4px solid #6c757d; }
    .square-free { border-left: 4px solid #ffc107; background-color: #fff3cd; }

    .activity-item {
        padding: 4px 0;
        border-bottom: 1px solid #eee;
    }    .activity-item:last-child {
        border-bottom: none;
    }
</style>
