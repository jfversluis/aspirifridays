@page "/board-management"
@rendermode InteractiveServer
@attribute [Authorize]
@using BingoBoard.Admin.Models
@using BingoBoard.Admin.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject IBingoService BingoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AddressResolver AddressResolver
@implements IAsyncDisposable

<PageTitle>Board Management - Bingo Admin</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-th-large"></i> Board Management
            </h1>
            <p class="text-muted">Manage all available bingo squares and approve client requests.</p>
        </div>
    </div>

    <!-- Live Mode Toggle Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card @(isLiveMode ? "border-success" : "border-info")">
                <div class="card-header @(isLiveMode ? "bg-success text-white" : "bg-info text-white")">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas @(isLiveMode ? "fa-broadcast-tower" : "fa-gamepad")"></i> 
                            Stream Mode: @(isLiveMode ? "LIVE" : "FREE PLAY")
                        </h5>
                        <div class="form-check form-switch">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="liveModeSwitch" 
                                   @bind="isLiveMode" 
                                   @bind:after="OnLiveModeToggle"
                                   style="font-size: 1.25rem;">
                            <label class="form-check-label text-white ms-2" for="liveModeSwitch">
                                @(isLiveMode ? "Live Stream Active" : "Free Play Mode")
                            </label>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLiveMode)
                    {
                        <div class="alert alert-success mb-0">
                            <i class="fas fa-video"></i>
                            <strong>Live Stream Mode Active:</strong> 
                            Clients must request approval to mark squares. Use the approval workflow below to manage requests.
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-0">
                            <i class="fas fa-play"></i>
                            <strong>Free Play Mode Active:</strong> 
                            Clients can freely mark squares without approval. Perfect for when there's no live stream happening.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Approval Requests Section -->
    @if (isLiveMode && pendingApprovals.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-clock"></i> Pending Approval Requests
                                <span class="badge bg-dark ms-2">@pendingApprovals.Count</span>
                            </h5>
                            <div class="btn-group">
                                <button @onclick="ApproveAllRequests" 
                                        class="btn btn-success btn-sm me-2"
                                        disabled="@isProcessingApproval">
                                    <i class="fas fa-check-double"></i> Approve All (@pendingApprovals.Count)
                                </button>
                                <button @onclick="LoadPendingApprovals" class="btn btn-outline-dark btn-sm">
                                    <i class="fas fa-sync-alt"></i> Refresh
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var approvalGroup in pendingApprovals
                                .GroupBy(a => new { a.SquareId, a.RequestedState })
                                .OrderBy(g => g.First().RequestedAt))
                            {
                                var firstApproval = approvalGroup.First();
                                var requestCount = approvalGroup.Count();
                                
                                <div class="col-lg-6 col-md-12 mb-3">
                                    <div class="approval-request-card">
                                        <div class="approval-header">
                                            <span class="badge bg-warning text-dark">PENDING</span>
                                            <small class="text-muted">@firstApproval.RequestedAt.ToString("HH:mm:ss")</small>
                                        </div>
                                        <div class="approval-content">
                                            <h6 class="mb-2">@firstApproval.SquareLabel</h6>
                                            <p class="mb-2">
                                                @if (requestCount > 1)
                                                {
                                                    <text><strong>@requestCount clients</strong> want to <strong>@(firstApproval.RequestedState ? "CHECK" : "UNCHECK")</strong> this square</text>
                                                }
                                                else
                                                {
                                                    <text>Client wants to <strong>@(firstApproval.RequestedState ? "CHECK" : "UNCHECK")</strong> this square</text>
                                                }
                                            </p>
                                            @if (requestCount > 1)
                                            {
                                                <small class="text-info mb-2 d-block">
                                                    <i class="fas fa-info-circle"></i> 
                                                    Approving/denying will affect all @requestCount requests
                                                </small>
                                            }
                                            <small class="text-muted">
                                                @if (requestCount == 1)
                                                {
                                                    <text>Client ID: @firstApproval.ClientId.Substring(0, Math.Min(8, firstApproval.ClientId.Length))...</text>
                                                }
                                                else
                                                {
                                                    <text>Multiple clients: @string.Join(", ", approvalGroup.Take(3).Select(a => a.ClientId.Substring(0, Math.Min(6, a.ClientId.Length)) + "..."))</text>
                                                    @if (requestCount > 3)
                                                    {
                                                        <text> and @(requestCount - 3) more</text>
                                                    }
                                                }
                                            </small>
                                        </div>
                                        <div class="approval-actions">
                                            <button @onclick="async () => await ApproveRequest(firstApproval.Id)" 
                                                    class="btn btn-success btn-sm me-2"
                                                    disabled="@isProcessingApproval">
                                                <i class="fas fa-check"></i> Approve @(requestCount > 1 ? $"All ({requestCount})" : "")
                                            </button>
                                            <button @onclick="() => ShowDenyModal(firstApproval)" 
                                                    class="btn btn-danger btn-sm"
                                                    disabled="@isProcessingApproval">
                                                <i class="fas fa-times"></i> Deny @(requestCount > 1 ? $"All ({requestCount})" : "")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-grid"></i> All Available Squares
                        <span class="badge bg-primary ms-2">@allSquares.Count</span>
                    </h5>
                    <div>
                        <button @onclick="LoadAllSquares" class="btn btn-outline-primary btn-sm me-2">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button @onclick="ShowCheckedOnly" class="btn btn-outline-success btn-sm me-2">
                            <i class="fas fa-check"></i> Show Checked (@allSquares.Count(s => s.IsChecked))
                        </button>
                        <button @onclick="ShowAllSquares" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-eye"></i> Show All
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading squares...</p>
                        </div>
                    }
                    else if (displaySquares.Any())
                    {
                        <div class="row">
                            @foreach (var square in displaySquares.OrderBy(s => s.Type).ThenBy(s => s.Label))
                            {
                                var hasPendingRequest = pendingApprovals.Any(p => p.SquareId == square.Id);
                                var pendingRequest = pendingApprovals.FirstOrDefault(p => p.SquareId == square.Id);
                                
                                <div class="col-lg-4 col-md-6 mb-3">
                                    <div class="square-card @(square.IsChecked ? "square-checked" : "") @GetSquareTypeClass(square.Type) @(hasPendingRequest ? "square-pending-approval" : "")"
                                         @onclick="async () => await ToggleSquareGlobally(square.Id, !square.IsChecked)">
                                        <div class="square-header">
                                            <span class="square-type badge">@square.Type</span>
                                            <div class="square-status">
                                                @if (hasPendingRequest)
                                                {
                                                    <i class="fas fa-clock text-warning me-1" title="Pending approval request"></i>
                                                }
                                                @if (square.IsChecked)
                                                {
                                                    <i class="fas fa-check-circle text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-circle text-muted"></i>
                                                }
                                            </div>
                                        </div>
                                        <div class="square-content">
                                            <p class="square-text">@square.Label</p>
                                            @if (hasPendingRequest && pendingRequest != null)
                                            {
                                                <div class="pending-indicator">
                                                    <small class="text-warning">
                                                        <i class="fas fa-clock"></i>
                                                        Request to @(pendingRequest.RequestedState ? "CHECK" : "UNCHECK")
                                                    </small>
                                                </div>
                                            }
                                            <small class="square-id text-muted">ID: @square.Id</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="fas fa-inbox fa-3x mb-3"></i>
                            <p>No squares found</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Log Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list"></i> Global Updates Log
                        <button @onclick="ClearLog" class="btn btn-sm btn-outline-secondary ms-2">Clear</button>
                    </h5>
                </div>
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    @if (activityLog.Any())
                    {
                        @foreach (var log in activityLog.OrderByDescending(l => l.Timestamp))
                        {
                            <div class="activity-item">
                                <small class="text-muted">@log.Timestamp.ToString("HH:mm:ss")</small>
                                <span class="ms-2">@log.Message</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No activity yet</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Deny Request Modal -->
@if (showDenyModalDialog && currentApprovalForDenial != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Deny Approval Request</h5>
                    <button type="button" class="btn-close" @onclick="CancelDenyModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Square:</strong> @currentApprovalForDenial.SquareLabel</p>
                    <p><strong>Action:</strong> @(currentApprovalForDenial.RequestedState ? "Check" : "Uncheck")</p>
                    @{
                        var relatedCount = pendingApprovals.Count(a => 
                            a.SquareId == currentApprovalForDenial.SquareId && 
                            a.RequestedState == currentApprovalForDenial.RequestedState);
                    }
                    @if (relatedCount > 1)
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <strong>Note:</strong> This will deny all @relatedCount requests for this action on this square.
                        </div>
                    }
                    <div class="mb-3">
                        <label for="denyReason" class="form-label">Reason for denial (optional):</label>
                        <textarea @bind="denyReason" id="denyReason" class="form-control" rows="3" 
                                  placeholder="Provide a reason for denying this request..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDenyModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DenyRequest" disabled="@isProcessingApproval">
                        <i class="fas fa-times"></i> Deny Request
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private List<BingoSquare> allSquares = new();
    private List<BingoSquare> displaySquares = new();
    private List<string> globallyCheckedSquares = new();
    private List<ActivityLogEntry> activityLog = new();
    private List<PendingApproval> pendingApprovals = new();
    private bool isLoading = true;
    private bool showCheckedOnly = false;
    private bool isProcessingApproval = false;
    private bool showDenyModalDialog = false;
    private PendingApproval? currentApprovalForDenial = null;
    private string denyReason = "";
    private Timer? refreshTimer;
    private bool isLiveMode = true; // Default to live mode for safety

    public class ActivityLogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(AddressResolver.Address)
            .Build();

        // Set up event handlers
        hubConnection.On<List<BingoSquare>>("AllSquaresReceived", (squares) =>
        {
            _ = InvokeAsync(async () =>
            {
                allSquares = squares;
                
                // Load the globally checked squares and update the square states
                await LoadGloballyCheckedSquares();
                
                UpdateDisplaySquares();
                isLoading = false;
                StateHasChanged();
                AddToLog("Loaded all available squares");
            });
        });

        hubConnection.On<dynamic>("GlobalSquareUpdate", (data) =>
        {
            _ = InvokeAsync(() =>
            {
                try
                {
                    // Handle both JsonElement and dynamic object cases
                    string squareId = "";
                    bool isChecked = false;
                    string message = "";
                    
                    // Debug logging
                    Console.WriteLine($"[Admin] GlobalSquareUpdate received. Data type: {data?.GetType()?.Name}");
                    if (data is System.Text.Json.JsonElement jsonElement)
                    {
                        Console.WriteLine($"[Admin] GlobalSquareUpdate JsonElement properties: {string.Join(", ", jsonElement.EnumerateObject().Select(p => p.Name))}");
                    }
                    
                    // Check if data is JsonElement (common with SignalR)
                    if (data is System.Text.Json.JsonElement jsonElement2)
                    {
                        if (jsonElement2.TryGetProperty("squareId", out var squareIdProp))
                            squareId = squareIdProp.GetString() ?? "";
                        if (jsonElement2.TryGetProperty("isChecked", out var isCheckedProp))
                            isChecked = isCheckedProp.GetBoolean();
                        if (jsonElement2.TryGetProperty("message", out var messageProp))
                            message = messageProp.GetString() ?? "";
                    }
                    else
                    {
                        // Fallback to dynamic access
                        squareId = data?.SquareId?.ToString() ?? "";
                        isChecked = data?.IsChecked ?? false;
                        message = data?.Message?.ToString() ?? "";
                    }
                    
                    Console.WriteLine($"[Admin] GlobalSquareUpdate received: SquareId={squareId}, IsChecked={isChecked}");
                    AddToLog($"Global square update: {message}");
                    
                    // Update local state
                    if (isChecked && !globallyCheckedSquares.Contains(squareId))
                    {
                        globallyCheckedSquares.Add(squareId);
                    }
                    else if (!isChecked && globallyCheckedSquares.Contains(squareId))
                    {
                        globallyCheckedSquares.Remove(squareId);
                    }
                    
                    // Update the actual square object's IsChecked property
                    var square = allSquares.FirstOrDefault(s => s.Id == squareId);
                    if (square != null)
                    {
                        Console.WriteLine($"[Admin] Updating square {squareId} from {square.IsChecked} to {isChecked}");
                        square.IsChecked = isChecked;
                    }
                    else
                    {
                        Console.WriteLine($"[Admin] WARNING: Square {squareId} not found in allSquares list");
                    }
                    
                    UpdateDisplaySquares();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Admin] Error processing global square update: {ex.Message}");
                    AddToLog($"Error processing global square update: {ex.Message}");
                }
            });
        });

        hubConnection.On<string>("Error", (error) =>
        {
            _ = InvokeAsync(() =>
            {
                AddToLog($"Error: {error}");
                StateHasChanged();
            });
        });

        // Approval workflow event handlers
        hubConnection.On<dynamic>("NewApprovalRequest", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                try
                {
                    // Handle both JsonElement and dynamic object cases
                    string squareLabel = "";
                    string approvalId = "";
                    string squareId = "";
                    bool requestedState = false;
                    
                    // Check if data is JsonElement (common with SignalR)
                    if (data is System.Text.Json.JsonElement jsonElement)
                    {
                        if (jsonElement.TryGetProperty("squareLabel", out var squareLabelProp))
                            squareLabel = squareLabelProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("approvalId", out var approvalIdProp))
                            approvalId = approvalIdProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("squareId", out var squareIdProp))
                            squareId = squareIdProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("requestedState", out var requestedStateProp))
                            requestedState = requestedStateProp.GetBoolean();
                    }
                    else
                    {
                        // Fallback to dynamic access
                        squareLabel = data.SquareLabel?.ToString() ?? "";
                        approvalId = data.ApprovalId?.ToString() ?? "";
                        squareId = data.SquareId?.ToString() ?? "";
                        requestedState = data.RequestedState ?? false;
                    }
                    
                    // Check if the square is already in the requested state
                    var square = allSquares.FirstOrDefault(s => s.Id == squareId);
                    if (square != null && square.IsChecked == requestedState)
                    {
                        // Square is already in the requested state, auto-approve without showing notification
                        AddToLog($"Auto-approving request for '{squareLabel}' - already {(requestedState ? "checked" : "unchecked")}");
                        
                        // Send approval immediately
                        if (hubConnection != null)
                        {
                            await hubConnection.SendAsync("ApproveSquareRequest", approvalId);
                            AddToLog($"Auto-approved request: {approvalId}");
                        }
                        
                        return; // Don't process as a normal approval request
                    }
                    
                    AddToLog($"New approval request for square: {squareLabel}");
                    
                    // Immediately refresh pending approvals to get real-time update
                    await LoadPendingApprovals();
                    
                    // Also update the display squares to show pending indicators
                    UpdateDisplaySquares();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    AddToLog($"Error processing new approval request: {ex.Message}");
                }
            });
        });

        hubConnection.On<dynamic>("ApprovalRequestProcessed", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                try
                {
                    // Handle both JsonElement and dynamic object cases
                    string status = "";
                    string squareLabel = "";
                    string approvalId = "";
                    string squareId = "";
                    bool requestedState = false;
                    int relatedRequestsCount = 1;
                    
                    // Check if data is JsonElement (common with SignalR)
                    if (data is System.Text.Json.JsonElement jsonElement)
                    {
                        if (jsonElement.TryGetProperty("status", out var statusProp))
                            status = statusProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("squareLabel", out var squareLabelProp))
                            squareLabel = squareLabelProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("approvalId", out var approvalIdProp))
                            approvalId = approvalIdProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("squareId", out var squareIdProp))
                            squareId = squareIdProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("requestedState", out var requestedStateProp))
                            requestedState = requestedStateProp.GetBoolean();
                        if (jsonElement.TryGetProperty("relatedRequestsCount", out var relatedRequestsCountProp))
                            relatedRequestsCount = relatedRequestsCountProp.GetInt32();
                    }
                    else
                    {
                        // Fallback to dynamic access
                        status = data.Status?.ToString() ?? "";
                        squareLabel = data.SquareLabel?.ToString() ?? "";
                        approvalId = data.ApprovalId?.ToString() ?? "";
                        squareId = data.SquareId?.ToString() ?? "";
                        requestedState = data.RequestedState ?? false;
                        relatedRequestsCount = data.RelatedRequestsCount ?? 1;
                    }
                    
                    var countMessage = relatedRequestsCount > 1 ? $" ({relatedRequestsCount} related requests)" : "";
                    AddToLog($"Approval request {status.ToLower()}: {squareLabel}{countMessage}");
                    
                    // Remove all processed approvals from local list immediately
                    // Since multiple related requests were processed, remove all for the same square/state
                    var removedCount = pendingApprovals.RemoveAll(a => 
                        a.SquareId == squareId && a.RequestedState == requestedState);
                    
                    if (removedCount > 0)
                    {
                        Console.WriteLine($"[Admin] Removed {removedCount} related pending approvals for square {squareId}");
                    }
                    
                    // Refresh to get the latest state from server
                    await LoadPendingApprovals();
                    
                    // If approved, refresh the squares to show updated states
                    if (status.Equals("Approved", StringComparison.OrdinalIgnoreCase))
                    {
                        await LoadGloballyCheckedSquares();
                    }
                    
                    // Update display squares to remove pending indicators
                    UpdateDisplaySquares();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    AddToLog($"Error processing approval status update: {ex.Message}");
                }
            });
        });

        // Admin-only square update handler (for approved squares)
        hubConnection.On<dynamic>("AdminSquareUpdate", (data) =>
        {
            _ = InvokeAsync(() =>
            {
                try
                {
                    // Handle both JsonElement and dynamic object cases
                    string squareId = "";
                    bool isChecked = false;
                    string message = "";
                    
                    // Debug logging
                    Console.WriteLine($"[Admin] AdminSquareUpdate received. Data type: {data?.GetType()?.Name}");
                    if (data is System.Text.Json.JsonElement jsonElement)
                    {
                        Console.WriteLine($"[Admin] AdminSquareUpdate JsonElement properties: {string.Join(", ", jsonElement.EnumerateObject().Select(p => p.Name))}");
                    }
                    
                    // Check if data is JsonElement (common with SignalR)
                    if (data is System.Text.Json.JsonElement jsonElement2)
                    {
                        if (jsonElement2.TryGetProperty("squareId", out var squareIdProp))
                            squareId = squareIdProp.GetString() ?? "";
                        if (jsonElement2.TryGetProperty("isChecked", out var isCheckedProp))
                            isChecked = isCheckedProp.GetBoolean();
                        if (jsonElement2.TryGetProperty("message", out var messageProp))
                            message = messageProp.GetString() ?? "";
                    }
                    else
                    {
                        // Fallback to dynamic access
                        squareId = data?.SquareId?.ToString() ?? "";
                        isChecked = data?.IsChecked ?? false;
                        message = data?.Message?.ToString() ?? "";
                    }
                    
                    Console.WriteLine($"[Admin] AdminSquareUpdate received: SquareId={squareId}, IsChecked={isChecked}");
                    AddToLog($"Admin square update: {message}");
                    
                    // Update local state
                    if (isChecked && !globallyCheckedSquares.Contains(squareId))
                    {
                        globallyCheckedSquares.Add(squareId);
                    }
                    else if (!isChecked && globallyCheckedSquares.Contains(squareId))
                    {
                        globallyCheckedSquares.Remove(squareId);
                    }
                    
                    // Update the actual square object's IsChecked property
                    var square = allSquares.FirstOrDefault(s => s.Id == squareId);
                    if (square != null)
                    {
                        Console.WriteLine($"[Admin] Updating square {squareId} from {square.IsChecked} to {isChecked}");
                        square.IsChecked = isChecked;
                    }
                    else
                    {
                        Console.WriteLine($"[Admin] WARNING: Square {squareId} not found in allSquares list");
                    }
                    
                    UpdateDisplaySquares();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Admin] Error processing admin square update: {ex.Message}");
                    AddToLog($"Error processing admin square update: {ex.Message}");
                }
            });
        });

        hubConnection.On<List<PendingApproval>>("PendingApprovalsList", (approvals) =>
        {
            _ = InvokeAsync(() =>
            {
                Console.WriteLine($"[Admin] PendingApprovalsList received: {approvals?.Count ?? 0} approvals at {DateTime.Now:HH:mm:ss}");
                pendingApprovals = approvals ?? new List<PendingApproval>();
                UpdateDisplaySquares(); // Update squares to show/hide pending indicators
                StateHasChanged();
                AddToLog($"Loaded {pendingApprovals.Count} pending approval requests");
            });
        });

        hubConnection.On<dynamic>("LiveModeReceived", (data) =>
        {
            _ = InvokeAsync(() =>
            {
                try
                {
                    bool newIsLiveMode = false;
                    
                    // Handle both JsonElement and dynamic object cases
                    if (data is System.Text.Json.JsonElement jsonElement)
                    {
                        if (jsonElement.TryGetProperty("isLiveMode", out var isLiveModeProp))
                            newIsLiveMode = isLiveModeProp.GetBoolean();
                    }
                    else
                    {
                        newIsLiveMode = data.IsLiveMode ?? true;
                    }
                    
                    isLiveMode = newIsLiveMode;
                    StateHasChanged();
                    AddToLog($"Live mode loaded: {(isLiveMode ? "Live Stream" : "Free Play")}");
                }
                catch (Exception ex)
                {
                    AddToLog($"Error processing live mode: {ex.Message}");
                }
            });
        });

        hubConnection.On<dynamic>("AllApprovalsProcessed", (data) =>
        {
            _ = InvokeAsync(async () =>
            {
                try
                {
                    string status = "";
                    int totalCount = 0;
                    int groupCount = 0;
                    string message = "";
                    
                    // Handle both JsonElement and dynamic object cases
                    if (data is System.Text.Json.JsonElement jsonElement)
                    {
                        if (jsonElement.TryGetProperty("status", out var statusProp))
                            status = statusProp.GetString() ?? "";
                        if (jsonElement.TryGetProperty("totalCount", out var totalCountProp))
                            totalCount = totalCountProp.GetInt32();
                        if (jsonElement.TryGetProperty("groupCount", out var groupCountProp))
                            groupCount = groupCountProp.GetInt32();
                        if (jsonElement.TryGetProperty("message", out var messageProp))
                            message = messageProp.GetString() ?? "";
                    }
                    else
                    {
                        status = data.Status?.ToString() ?? "";
                        totalCount = data.TotalCount ?? 0;
                        groupCount = data.GroupCount ?? 0;
                        message = data.Message?.ToString() ?? "";
                    }
                    
                    AddToLog($"Bulk approval completed: {message}");
                    
                    // Clear all pending approvals from local list
                    pendingApprovals.Clear();
                    
                    // Refresh to get the latest state from server
                    await LoadPendingApprovals();
                    await LoadGloballyCheckedSquares();
                    
                    // Update display squares
                    UpdateDisplaySquares();
                    
                    // Reset processing flag
                    isProcessingApproval = false;
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    AddToLog($"Error processing bulk approval response: {ex.Message}");
                    isProcessingApproval = false;
                    StateHasChanged();
                }
            });
        });

        await hubConnection.StartAsync();
        await LoadAllSquares();
        await LoadGloballyCheckedSquares();
        await LoadPendingApprovals();
        await LoadLiveMode();

        // Set up periodic refresh timer for pending approvals (every 10 seconds as fallback)
        refreshTimer = new Timer(async _ =>
        {
            try
            {
                await InvokeAsync(async () =>
                {
                    await LoadPendingApprovals();
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Timer refresh error: {ex.Message}");
            }
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private async Task LoadAllSquares()
    {
        if (hubConnection == null) return;

        try
        {
            isLoading = true;
            StateHasChanged();
            
            await hubConnection.SendAsync("GetAllAvailableSquares");

            isLoading = false;
            StateHasChanged();
            AddToLog("Requested all available squares from server.");
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading squares: {ex.Message}");
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGloballyCheckedSquares()
    {
        try
        {
            globallyCheckedSquares = await BingoService.GetGloballyCheckedSquaresAsync();
            
            // Update the IsChecked property of squares based on global state
            foreach (var square in allSquares)
            {
                square.IsChecked = globallyCheckedSquares.Contains(square.Id);
            }
            
            UpdateDisplaySquares();
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading globally checked squares: {ex.Message}");
        }
    }

    private async Task ToggleSquareGlobally(string squareId, bool isChecked)
    {
        if (hubConnection == null) return;

        try
        {
            var square = allSquares.FirstOrDefault(s => s.Id == squareId);
            if (square != null)
            {
                square.IsChecked = isChecked;
                StateHasChanged();
            }
            var squareLabel = square?.Label ?? squareId;
            
            Console.WriteLine($"[Admin] ToggleSquareGlobally called: SquareId={squareId}, IsChecked={isChecked}, Label={squareLabel}");
            AddToLog($"Requesting to globally {(isChecked ? "check" : "uncheck")} square: {squareLabel}");
            
            await hubConnection.SendAsync("AdminCheckSquareGlobally", squareId, isChecked);
            Console.WriteLine($"[Admin] SignalR message sent for square {squareId}");
            
            // Note: Local state will be updated when we receive the GlobalSquareUpdate event
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin] Error toggling square: {ex.Message}");
            AddToLog($"Error toggling square: {ex.Message}");
        }
    }

    private async Task LoadPendingApprovals()
    {
        if (hubConnection == null) return;

        try
        {
            Console.WriteLine($"[Admin] LoadPendingApprovals called at {DateTime.Now:HH:mm:ss}");
            await hubConnection.SendAsync("GetPendingApprovals");
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading pending approvals: {ex.Message}");
            Console.WriteLine($"[Admin] Error loading pending approvals: {ex.Message}");
        }
    }

    private async Task LoadLiveMode()
    {
        if (hubConnection == null) return;
        
        try
        {
            await hubConnection.SendAsync("GetLiveMode");
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading live mode: {ex.Message}");
        }
    }

    private async Task ApproveRequest(string approvalId)
    {
        if (hubConnection == null || isProcessingApproval) return;

        try
        {
            isProcessingApproval = true;
            StateHasChanged();

            // Get the approval details before processing so we can update local state
            var approval = pendingApprovals.FirstOrDefault(a => a.Id == approvalId);
            if (approval != null)
            {
                // Update the local square state immediately
                var square = allSquares.FirstOrDefault(s => s.Id == approval.SquareId);
                if (square != null)
                {
                    square.IsChecked = approval.RequestedState;
                    
                    // Also update the global state tracking
                    if (approval.RequestedState && !globallyCheckedSquares.Contains(approval.SquareId))
                    {
                        globallyCheckedSquares.Add(approval.SquareId);
                    }
                    else if (!approval.RequestedState && globallyCheckedSquares.Contains(approval.SquareId))
                    {
                        globallyCheckedSquares.Remove(approval.SquareId);
                    }
                    
                    AddToLog($"Locally updated square '{square.Label}' to {(approval.RequestedState ? "checked" : "unchecked")}");
                }
            }

            await hubConnection.SendAsync("ApproveSquareRequest", approvalId);
            AddToLog($"Approved request: {approvalId}");

            // Immediately remove from local list for instant UI feedback
            pendingApprovals.RemoveAll(a => a.Id == approvalId);
            UpdateDisplaySquares();
            StateHasChanged();

            // Refresh to ensure we have the latest pending approvals state
            await Task.Delay(100); // Small delay to let server process
            await LoadPendingApprovals();
            
            // Note: Don't call LoadGloballyCheckedSquares() here as it will override 
            // the state that was just updated by the GlobalSquareUpdate event
        }
        catch (Exception ex)
        {
            AddToLog($"Error approving request: {ex.Message}");
        }
        finally
        {
            isProcessingApproval = false;
            StateHasChanged();
        }
    }

    private void ShowDenyModal(PendingApproval approval)
    {
        currentApprovalForDenial = approval;
        denyReason = "";
        showDenyModalDialog = true;
        StateHasChanged();
    }

    private async Task DenyRequest()
    {
        if (hubConnection == null || currentApprovalForDenial == null || isProcessingApproval) return;

        try
        {
            isProcessingApproval = true;
            StateHasChanged();

            var reason = string.IsNullOrWhiteSpace(denyReason) ? null : denyReason;
            await hubConnection.SendAsync("DenySquareRequest", currentApprovalForDenial.Id, reason);
            AddToLog($"Denied request: {currentApprovalForDenial.SquareLabel}");

            // Immediately remove from local list for instant UI feedback
            pendingApprovals.RemoveAll(a => a.Id == currentApprovalForDenial.Id);
            UpdateDisplaySquares();
            
            // Close modal immediately
            showDenyModalDialog = false;
            var deniedApprovalId = currentApprovalForDenial.Id;
            currentApprovalForDenial = null;
            denyReason = "";
            StateHasChanged();

            // Refresh to ensure we have the latest state
            await Task.Delay(100); // Small delay to let server process
            await LoadPendingApprovals();
            
            // Refresh the squares list for consistency
            await LoadGloballyCheckedSquares();
        }
        catch (Exception ex)
        {
            AddToLog($"Error denying request: {ex.Message}");
        }
        finally
        {
            isProcessingApproval = false;
            showDenyModalDialog = false;
            currentApprovalForDenial = null;
            denyReason = "";
            StateHasChanged();
        }
    }

    private void CancelDenyModal()
    {
        showDenyModalDialog = false;
        currentApprovalForDenial = null;
        denyReason = "";
        StateHasChanged();
    }

    private async Task OnLiveModeToggle()
    {
        try
        {
            if (hubConnection != null)
            {
                // Broadcast the live mode change to all clients
                await hubConnection.SendAsync("BroadcastLiveModeChange", isLiveMode);
                
                string mode = isLiveMode ? "Live Stream" : "Free Play";
                AddToLog($"Switched to {mode} mode");
                
                // If switching to free play mode, clear any pending approvals since they're no longer needed
                if (!isLiveMode && pendingApprovals.Any())
                {
                    AddToLog("Free play mode activated - approval requests are no longer required");
                }
            }
        }
        catch (Exception ex)
        {
            AddToLog($"Error changing live mode: {ex.Message}");
        }
    }

    private async Task ApproveAllRequests()
    {
        if (hubConnection == null || isProcessingApproval || !pendingApprovals.Any()) return;

        isProcessingApproval = true;
        StateHasChanged();

        try
        {
            var pendingCount = pendingApprovals.Count;
            AddToLog($"Approving all {pendingCount} pending requests...");

            // Update local state immediately for all pending approvals
            foreach (var approval in pendingApprovals)
            {
                var square = allSquares.FirstOrDefault(s => s.Id == approval.SquareId);
                if (square != null)
                {
                    square.IsChecked = approval.RequestedState;
                    
                    // Also update the global state tracking
                    if (approval.RequestedState && !globallyCheckedSquares.Contains(approval.SquareId))
                    {
                        globallyCheckedSquares.Add(approval.SquareId);
                    }
                    else if (!approval.RequestedState && globallyCheckedSquares.Contains(approval.SquareId))
                    {
                        globallyCheckedSquares.Remove(approval.SquareId);
                    }
                }
            }

            // Call the SignalR method to approve all
            await hubConnection.SendAsync("ApproveAllPendingSquares");

            // Clear local pending approvals immediately for instant UI feedback
            pendingApprovals.Clear();
            UpdateDisplaySquares();
            StateHasChanged();

            // Note: Processing flag will be reset when we receive the AllApprovalsProcessed event
            // If no event is received within reasonable time, the flag will be reset on error or user action
        }
        catch (Exception ex)
        {
            AddToLog($"Error approving all requests: {ex.Message}");
            
            // Reset processing flag on error
            isProcessingApproval = false;
            StateHasChanged();
        }
    }

    private void ShowCheckedOnly()
    {
        showCheckedOnly = true;
        UpdateDisplaySquares();
    }

    private void ShowAllSquares()
    {
        showCheckedOnly = false;
        UpdateDisplaySquares();
    }

    private void UpdateDisplaySquares()
    {
        if (showCheckedOnly)
        {
            displaySquares = allSquares.Where(s => s.IsChecked).ToList();
        }
        else
        {
            displaySquares = allSquares.ToList();
        }
        StateHasChanged();
    }

    private void ClearLog()
    {
        activityLog.Clear();
        StateHasChanged();
    }

    private void AddToLog(string message)
    {
        activityLog.Add(new ActivityLogEntry
        {
            Timestamp = DateTime.Now,
            Message = message
        });
        
        // Keep only the last 100 entries
        if (activityLog.Count > 100)
        {
            activityLog.RemoveAt(0);
        }
    }

    private string GetSquareTypeClass(string? type)
    {
        return type switch
        {
            "bug" => "square-type-bug",
            "dev" => "square-type-dev",
            "quote" => "square-type-quote",
            "oops" => "square-type-oops",
            "meta" => "square-type-meta",
            "free" => "square-type-free",
            _ => ""
        };
    }

    public async ValueTask DisposeAsync()
    {
        refreshTimer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .square-card {
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: #f8f9fa;
        height: 140px;
        display: flex;
        flex-direction: column;
    }

    .square-card:hover {
        border-color: #007bff;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .square-card.square-checked {
        background-color: #d4edda;
        border-color: #28a745;
    }

    .square-card.square-pending-approval {
        background-color: #fff3cd;
        border-color: #ffc107;
        animation: pulse-warning 2s infinite;
    }

    @@keyframes pulse-warning {
        0% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.4); }
        70% { box-shadow: 0 0 0 10px rgba(255, 193, 7, 0); }
        100% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0); }
    }

    .square-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .square-status {
        display: flex;
        align-items: center;
    }

    .pending-indicator {
        margin-top: 8px;
        padding: 4px 8px;
        background-color: rgba(255, 193, 7, 0.2);
        border-radius: 4px;
        border-left: 3px solid #ffc107;
    }

    .square-type {
        font-size: 0.7rem;
        text-transform: uppercase;
        font-weight: bold;
    }

    .square-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .square-text {
        font-size: 0.9rem;
        font-weight: 500;
        line-height: 1.3;
        margin: 0;
        word-break: break-word;
    }

    .square-id {
        margin-top: 4px;
        font-size: 0.75rem;
    }

    .square-type-bug .square-type { background-color: #dc3545; }
    .square-type-dev .square-type { background-color: #007bff; }
    .square-type-quote .square-type { background-color: #6f42c1; }
    .square-type-oops .square-type { background-color: #fd7e14; }
    .square-type-meta .square-type { background-color: #6c757d; }
    .square-type-free .square-type { background-color: #ffc107; color: #000; }

    .activity-item {
        padding: 4px 0;
        border-bottom: 1px solid #eee;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    /* Approval Request Styles */
    .approval-request-card {
        border: 2px solid #ffc107;
        border-radius: 8px;
        padding: 15px;
        background-color: #fff3cd;
        box-shadow: 0 2px 4px rgba(255, 193, 7, 0.2);
        transition: all 0.3s ease;
    }

    .approval-request-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(255, 193, 7, 0.3);
    }

    .approval-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .approval-content {
        margin-bottom: 15px;
    }

    .approval-content h6 {
        color: #856404;
        font-weight: 600;
    }

    .approval-actions {
        display: flex;
        gap: 8px;
    }

    .approval-actions .btn {
        flex: 1;
        font-size: 0.875rem;
    }

    /* Modal styles */
    .modal.show {
        display: block !important;
    }
</style>
