@page "/board-management"
@rendermode InteractiveServer
@using BingoBoard.Admin.Models
@using BingoBoard.Admin.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject IBingoService BingoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Board Management - Bingo Admin</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-th-large"></i> Board Management
            </h1>
            <p class="text-muted">Manage all available bingo squares. Check/uncheck squares globally to update all connected clients.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-grid"></i> All Available Squares
                        <span class="badge bg-primary ms-2">@allSquares.Count</span>
                    </h5>
                    <div>
                        <button @onclick="LoadAllSquares" class="btn btn-outline-primary btn-sm me-2">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button @onclick="ShowCheckedOnly" class="btn btn-outline-success btn-sm me-2">
                            <i class="fas fa-check"></i> Show Checked (@allSquares.Count(s => s.IsChecked))
                        </button>
                        <button @onclick="ShowAllSquares" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-eye"></i> Show All
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading squares...</p>
                        </div>
                    }
                    else if (displaySquares.Any())
                    {
                        <div class="row">
                            @foreach (var square in displaySquares.OrderBy(s => s.Type).ThenBy(s => s.Label))
                            {
                                <div class="col-lg-4 col-md-6 mb-3">
                                    <div class="square-card @(square.IsChecked ? "square-checked" : "") @GetSquareTypeClass(square.Type)"
                                         @onclick="async () => await ToggleSquareGlobally(square.Id, !square.IsChecked)">
                                        <div class="square-header">
                                            <span class="square-type badge">@square.Type</span>
                                            @if (square.IsChecked)
                                            {
                                                <i class="fas fa-check-circle text-success"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-circle text-muted"></i>
                                            }
                                        </div>
                                        <div class="square-content">
                                            <p class="square-text">@square.Label</p>
                                            <small class="square-id text-muted">ID: @square.Id</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="fas fa-inbox fa-3x mb-3"></i>
                            <p>No squares found</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Log Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list"></i> Global Updates Log
                        <button @onclick="ClearLog" class="btn btn-sm btn-outline-secondary ms-2">Clear</button>
                    </h5>
                </div>
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    @if (activityLog.Any())
                    {
                        @foreach (var log in activityLog.OrderByDescending(l => l.Timestamp))
                        {
                            <div class="activity-item">
                                <small class="text-muted">@log.Timestamp.ToString("HH:mm:ss")</small>
                                <span class="ms-2">@log.Message</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No activity yet</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<BingoSquare> allSquares = new();
    private List<BingoSquare> displaySquares = new();
    private List<string> globallyCheckedSquares = new();
    private List<ActivityLogEntry> activityLog = new();
    private bool isLoading = true;
    private bool showCheckedOnly = false;

    public class ActivityLogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/bingohub"))
            .Build();

        // Set up event handlers
        hubConnection.On<List<BingoSquare>>("AllSquaresReceived", (squares) =>
        {
            _ = InvokeAsync(async () =>
            {
                allSquares = squares;
                
                // Load the globally checked squares and update the square states
                await LoadGloballyCheckedSquares();
                
                UpdateDisplaySquares();
                isLoading = false;
                StateHasChanged();
                AddToLog("Loaded all available squares");
            });
        });

        hubConnection.On<dynamic>("GlobalSquareUpdate", (data) =>
        {
            _ = InvokeAsync(() =>
            {
                try
                {
                    string squareId = data.SquareId?.ToString() ?? "";
                    bool isChecked = data.IsChecked ?? false;
                    string message = data.Message?.ToString() ?? "";
                    
                    Console.WriteLine($"[Admin] GlobalSquareUpdate received: SquareId={squareId}, IsChecked={isChecked}");
                    AddToLog($"Global square update: {message}");
                    
                    // Update local state
                    if (isChecked && !globallyCheckedSquares.Contains(squareId))
                    {
                        globallyCheckedSquares.Add(squareId);
                    }
                    else if (!isChecked && globallyCheckedSquares.Contains(squareId))
                    {
                        globallyCheckedSquares.Remove(squareId);
                    }
                    
                    // Update the actual square object's IsChecked property
                    var square = allSquares.FirstOrDefault(s => s.Id == squareId);
                    if (square != null)
                    {
                        Console.WriteLine($"[Admin] Updating square {squareId} from {square.IsChecked} to {isChecked}");
                        square.IsChecked = isChecked;
                    }
                    else
                    {
                        Console.WriteLine($"[Admin] WARNING: Square {squareId} not found in allSquares list");
                    }
                    
                    UpdateDisplaySquares();
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Admin] Error processing global square update: {ex.Message}");
                    AddToLog($"Error processing global square update: {ex.Message}");
                }
            });
        });

        hubConnection.On<string>("Error", (error) =>
        {
            _ = InvokeAsync(() =>
            {
                AddToLog($"Error: {error}");
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
        await LoadAllSquares();
        await LoadGloballyCheckedSquares();
    }

    private async Task LoadAllSquares()
    {
        if (hubConnection == null) return;

        try
        {
            isLoading = true;
            StateHasChanged();
            
            await hubConnection.SendAsync("GetAllAvailableSquares");

            isLoading = false;
            StateHasChanged();
            AddToLog("Requested all available squares from server.");
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading squares: {ex.Message}");
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGloballyCheckedSquares()
    {
        try
        {
            globallyCheckedSquares = await BingoService.GetGloballyCheckedSquaresAsync();
            
            // Update the IsChecked property of squares based on global state
            foreach (var square in allSquares)
            {
                square.IsChecked = globallyCheckedSquares.Contains(square.Id);
            }
            
            UpdateDisplaySquares();
        }
        catch (Exception ex)
        {
            AddToLog($"Error loading globally checked squares: {ex.Message}");
        }
    }

    private async Task ToggleSquareGlobally(string squareId, bool isChecked)
    {
        if (hubConnection == null) return;

        try
        {
            var square = allSquares.FirstOrDefault(s => s.Id == squareId);
            if (square != null)
            {
                square.IsChecked = isChecked;
                StateHasChanged();
            }
            var squareLabel = square?.Label ?? squareId;
            
            Console.WriteLine($"[Admin] ToggleSquareGlobally called: SquareId={squareId}, IsChecked={isChecked}, Label={squareLabel}");
            AddToLog($"Requesting to globally {(isChecked ? "check" : "uncheck")} square: {squareLabel}");
            
            await hubConnection.SendAsync("AdminCheckSquareGlobally", squareId, isChecked);
            Console.WriteLine($"[Admin] SignalR message sent for square {squareId}");
            
            // Note: Local state will be updated when we receive the GlobalSquareUpdate event
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin] Error toggling square: {ex.Message}");
            AddToLog($"Error toggling square: {ex.Message}");
        }
    }

    private void ShowCheckedOnly()
    {
        showCheckedOnly = true;
        UpdateDisplaySquares();
    }

    private void ShowAllSquares()
    {
        showCheckedOnly = false;
        UpdateDisplaySquares();
    }

    private void UpdateDisplaySquares()
    {
        if (showCheckedOnly)
        {
            displaySquares = allSquares.Where(s => s.IsChecked).ToList();
        }
        else
        {
            displaySquares = allSquares.ToList();
        }
        StateHasChanged();
    }

    private void ClearLog()
    {
        activityLog.Clear();
        StateHasChanged();
    }

    private void AddToLog(string message)
    {
        activityLog.Add(new ActivityLogEntry
        {
            Timestamp = DateTime.Now,
            Message = message
        });
        
        // Keep only the last 100 entries
        if (activityLog.Count > 100)
        {
            activityLog.RemoveAt(0);
        }
    }

    private string GetSquareTypeClass(string? type)
    {
        return type switch
        {
            "bug" => "square-type-bug",
            "dev" => "square-type-dev",
            "quote" => "square-type-quote",
            "oops" => "square-type-oops",
            "meta" => "square-type-meta",
            "free" => "square-type-free",
            _ => ""
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .square-card {
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: #f8f9fa;
        height: 140px;
        display: flex;
        flex-direction: column;
    }

    .square-card:hover {
        border-color: #007bff;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .square-card.square-checked {
        background-color: #d4edda;
        border-color: #28a745;
    }

    .square-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 8px;
    }

    .square-type {
        font-size: 0.7rem;
        text-transform: uppercase;
        font-weight: bold;
    }

    .square-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .square-text {
        font-size: 0.9rem;
        font-weight: 500;
        line-height: 1.3;
        margin: 0;
        word-break: break-word;
    }

    .square-id {
        margin-top: 4px;
        font-size: 0.75rem;
    }

    .square-type-bug .square-type { background-color: #dc3545; }
    .square-type-dev .square-type { background-color: #007bff; }
    .square-type-quote .square-type { background-color: #6f42c1; }
    .square-type-oops .square-type { background-color: #fd7e14; }
    .square-type-meta .square-type { background-color: #6c757d; }
    .square-type-free .square-type { background-color: #ffc107; color: #000; }

    .activity-item {
        padding: 4px 0;
        border-bottom: 1px solid #eee;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
</style>
